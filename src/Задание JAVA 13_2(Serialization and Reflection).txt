Инструкция
 Напишите 2 статических generic-метода для сериализации и десериализации объектов.

 Метод для сериализации принимает два параметра: объект и ObjectOutputStream, куда нужно сериализовать данный объект.
 Вам нужно придумать некоторый алгоритм сериализации, так как сам объект может быть несериализуемого типа.
 (Чтобы проверить класс на сериализуемость, нужно воcпользоваться рефлексией, и с помощью объекта-дескриптора некоторым
  методом это узнать. Воспользуйтесь интернетом, чтобы выяснить, как именно это можно сделать). В этом случае нужно
  рекурсивно запуститься от всех полей данного класса: часть из них, которая в свою очередь сериализуема -
   сериализовать обычным способом, а от остальных опять запуститься рекурсивно. Таким образом, когда закончится
   рекурсия, сериализуется весь исходный объект.

 Пример:
 Есть несериализуемый класс Person с полями Name name и Phone phone. Name - сериализуемый класс. Phone -
  несериализуемый класс с полями Number number и Model model. Number и Model - сериализуемы.
 - в функцию придет Person, но он несериализуем, поэтому метод рекурсивно вызовется от name и phone
 - Name - сериализуем, поэтому name сериализуется обычным способом в ObjectOutputStream
 - Phone - снова несериализуем, поэтому метод рекурсивно вызовется от number и model
 - Number - сериализуем, поэтому number сериализуется обычным способом в ObjectOutputStream
 - Model - сериализуем, поэтому model сериализуется обычным способом в ObjectOutputStream
 На этом сериализация Person закончится.
 Гарантируется, что рекурсия не будет вечной и когда-то остановится, то есть не бывает циклических зависимостей типов.

 Затем реализуйте метод для десериализации, принимающий два параметра: объект запрашиваемого типа и ObjectInputStream.
  Объект нужен, чтобы понять какой класс вам нужно десериализовать. Помня ваш рекурсивный алгоритм сериализации,
  продумайте обратный алгоритм, чтобы на выходе ваш метод вернул десериализованный объект.

 Для освежения в памяти работы с сериализацией обратитесь к 8 уроку. Воспользуйтесь интернетом, чтобы больше узнать
 о рекурсии и рекурсивных алгоритмах, а также о работе с сериализуемыми/несериализуемыми классами.